/*
 * This Java source file was generated by the Gradle 'init' task.
 */
//package gp2_enhancements;

/*
-------------------
history
-------------------
v20: InputProcessor, -clean, Person(EnumMap) implementation. Refactored.
v19: read separator switched to comma & quoted strings from tab
v18: control header
v17: group implementation
v16: cleanup: created separete account, removed static declarations
v15: added category & vendor
v14: bug fix individual transaction amt
v13: added additional header, fixed sys formatting
v12: individual transaction amounts added
v11: added optional "sys" formatting
v10: "sys" account added to output
v9: csv formatting fixed (padding tabs)
v8: "sys" transaction implementation
v7: introducted individual checksum
v6: "percentage" transaction, correct implementation
v5: discard: "percentage" transaction, poor implementation
v4: "clearing" transaction implementation
v2: export to csv implementation
*/

public class gp2
{
	// ----------------------------------------------------
	// showUsage
	// ----------------------------------------------------
	private void showUsage()
	{
		System.out.println("\ngp2 - Purchases & Accounting breakdown");
		System.out.println("\tversion - v18 (6/20/2022)");
		System.out.println("\t - InputProcessor, -clean, enum implementations");
	}

	// ----------------------------------------------------
	// main
	// ----------------------------------------------------
	public static void main (String[] args)
	throws Exception
	{
		gp2 app = new gp2();

        int parmNo;
        String fileName = "" ;
		boolean bOld = false ;

        //command line optional parameters
        if (args.length == 0 || args.length > 2) {
			app.showUsage() ;
			return;
		}

        for (parmNo = 0; parmNo < args.length; parmNo++) {
			if ((Utils.inMatches(args[parmNo], Utils.IN_HELP)) || 
				(Utils.inMatches(args[parmNo], Utils.IN_VERSION))) {
					app.showUsage() ;
					return;
			} else {
					if (parmNo == 0) fileName = args[parmNo] ;
					if (parmNo == 1) {
						if ( (Utils.inMatches(args[parmNo], Utils.IN_CLEAN)) ){
							Utils.deleteFile(Utils.OUT_FOLDER, Utils.OUT_FILE + Utils.OUT_EXTENSION) ; 
							return ; 
						} else if ( (Utils.inMatches(args[parmNo], Utils.IN_TRUE)) || (Utils.inMatches(args[parmNo], Utils.IN_FALSE)) ) {
							bOld = Boolean.parseBoolean(args[parmNo]) ;
						}					
					}
			}
        }

		if (bOld == true) {
			account2 myAccount2 = new account2() ;
			myAccount2.ReadAndProcessTransactions(fileName, true) ;	// read input file
		}
		else {
			account4 myAccount4 = new account4() ;
			myAccount4.ReadAndProcessTransactions(fileName, true) ;	// read input file
		}
   } // end of main
} // end of class
